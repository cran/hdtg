// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cholesky
Eigen::MatrixXd cholesky(const Eigen::Map<Eigen::MatrixXd> A);
RcppExport SEXP _hdtg_cholesky(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(cholesky(A));
    return rcpp_result_gen;
END_RCPP
}
// applyWhitenTransform
Rcpp::List applyWhitenTransform(const Eigen::Map<Eigen::MatrixXd> constraintDirec, const Eigen::Map<Eigen::VectorXd> constraintBound, const Eigen::Map<Eigen::MatrixXd> choleskyFactor, const Eigen::Map<Eigen::VectorXd> unconstrainedMean, bool precParametrized);
RcppExport SEXP _hdtg_applyWhitenTransform(SEXP constraintDirecSEXP, SEXP constraintBoundSEXP, SEXP choleskyFactorSEXP, SEXP unconstrainedMeanSEXP, SEXP precParametrizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type constraintDirec(constraintDirecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraintBound(constraintBoundSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type choleskyFactor(choleskyFactorSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type unconstrainedMean(unconstrainedMeanSEXP);
    Rcpp::traits::input_parameter< bool >::type precParametrized(precParametrizedSEXP);
    rcpp_result_gen = Rcpp::wrap(applyWhitenTransform(constraintDirec, constraintBound, choleskyFactor, unconstrainedMean, precParametrized));
    return rcpp_result_gen;
END_RCPP
}
// whitenPosition
Eigen::VectorXd whitenPosition(const Eigen::Map<Eigen::VectorXd> position, const Eigen::Map<Eigen::MatrixXd> constraintDirec, const Eigen::Map<Eigen::VectorXd> constraintBound, const Eigen::Map<Eigen::MatrixXd> choleskyFactor, const Eigen::Map<Eigen::VectorXd> unconstrainedMean, bool precParametrized);
RcppExport SEXP _hdtg_whitenPosition(SEXP positionSEXP, SEXP constraintDirecSEXP, SEXP constraintBoundSEXP, SEXP choleskyFactorSEXP, SEXP unconstrainedMeanSEXP, SEXP precParametrizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type position(positionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type constraintDirec(constraintDirecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraintBound(constraintBoundSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type choleskyFactor(choleskyFactorSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type unconstrainedMean(unconstrainedMeanSEXP);
    Rcpp::traits::input_parameter< bool >::type precParametrized(precParametrizedSEXP);
    rcpp_result_gen = Rcpp::wrap(whitenPosition(position, constraintDirec, constraintBound, choleskyFactor, unconstrainedMean, precParametrized));
    return rcpp_result_gen;
END_RCPP
}
// unwhitenPosition
Eigen::VectorXd unwhitenPosition(const Eigen::VectorXd position, const Eigen::Map<Eigen::MatrixXd> choleskyFactor, const Eigen::Map<Eigen::VectorXd> unconstrainedMean, bool precParametrized);
RcppExport SEXP _hdtg_unwhitenPosition(SEXP positionSEXP, SEXP choleskyFactorSEXP, SEXP unconstrainedMeanSEXP, SEXP precParametrizedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd >::type position(positionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type choleskyFactor(choleskyFactorSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type unconstrainedMean(unconstrainedMeanSEXP);
    Rcpp::traits::input_parameter< bool >::type precParametrized(precParametrizedSEXP);
    rcpp_result_gen = Rcpp::wrap(unwhitenPosition(position, choleskyFactor, unconstrainedMean, precParametrized));
    return rcpp_result_gen;
END_RCPP
}
// simulateWhitenedDynamics
Rcpp::List simulateWhitenedDynamics(const Eigen::Map<Eigen::VectorXd> initialPosition, const Eigen::Map<Eigen::VectorXd> initialMomentum, const Eigen::Map<Eigen::MatrixXd> constraintDirec, const Eigen::Map<Eigen::VectorXd> constraintRowNormSq, const Eigen::Map<Eigen::VectorXd> constraintBound, double integrationTime, bool diagnosticMode);
RcppExport SEXP _hdtg_simulateWhitenedDynamics(SEXP initialPositionSEXP, SEXP initialMomentumSEXP, SEXP constraintDirecSEXP, SEXP constraintRowNormSqSEXP, SEXP constraintBoundSEXP, SEXP integrationTimeSEXP, SEXP diagnosticModeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initialPosition(initialPositionSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type initialMomentum(initialMomentumSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type constraintDirec(constraintDirecSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraintRowNormSq(constraintRowNormSqSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type constraintBound(constraintBoundSEXP);
    Rcpp::traits::input_parameter< double >::type integrationTime(integrationTimeSEXP);
    Rcpp::traits::input_parameter< bool >::type diagnosticMode(diagnosticModeSEXP);
    rcpp_result_gen = Rcpp::wrap(simulateWhitenedDynamics(initialPosition, initialMomentum, constraintDirec, constraintRowNormSq, constraintBound, integrationTime, diagnosticMode));
    return rcpp_result_gen;
END_RCPP
}
// createEngine
Rcpp::List createEngine(int dimension, std::vector<double>& lowerBounds, std::vector<double>& upperBounds, long seed, NumericVector& mean, NumericVector& precision, long flags);
RcppExport SEXP _hdtg_createEngine(SEXP dimensionSEXP, SEXP lowerBoundsSEXP, SEXP upperBoundsSEXP, SEXP seedSEXP, SEXP meanSEXP, SEXP precisionSEXP, SEXP flagsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type lowerBounds(lowerBoundsSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type upperBounds(upperBoundsSEXP);
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< long >::type flags(flagsSEXP);
    rcpp_result_gen = Rcpp::wrap(createEngine(dimension, lowerBounds, upperBounds, seed, mean, precision, flags));
    return rcpp_result_gen;
END_RCPP
}
// createNutsEngine
Rcpp::List createNutsEngine(int dimension, std::vector<double>& lowerBounds, std::vector<double>& upperBounds, long seed, double stepSize, NumericVector& mean, NumericVector& precision, long flags);
RcppExport SEXP _hdtg_createNutsEngine(SEXP dimensionSEXP, SEXP lowerBoundsSEXP, SEXP upperBoundsSEXP, SEXP seedSEXP, SEXP stepSizeSEXP, SEXP meanSEXP, SEXP precisionSEXP, SEXP flagsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type dimension(dimensionSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type lowerBounds(lowerBoundsSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type upperBounds(upperBoundsSEXP);
    Rcpp::traits::input_parameter< long >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type stepSize(stepSizeSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< long >::type flags(flagsSEXP);
    rcpp_result_gen = Rcpp::wrap(createNutsEngine(dimension, lowerBounds, upperBounds, seed, stepSize, mean, precision, flags));
    return rcpp_result_gen;
END_RCPP
}
// setMean
void setMean(SEXP sexp, NumericVector& mean);
RcppExport SEXP _hdtg_setMean(SEXP sexpSEXP, SEXP meanSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type mean(meanSEXP);
    setMean(sexp, mean);
    return R_NilValue;
END_RCPP
}
// setPrecision
void setPrecision(SEXP sexp, NumericVector& precision);
RcppExport SEXP _hdtg_setPrecision(SEXP sexpSEXP, SEXP precisionSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type precision(precisionSEXP);
    setPrecision(sexp, precision);
    return R_NilValue;
END_RCPP
}
// getNextEvent
Rcpp::List getNextEvent(SEXP sexp, NumericVector& position, NumericVector& velocity, NumericVector& action, NumericVector& logpdfGradient, NumericVector& momentum);
RcppExport SEXP _hdtg_getNextEvent(SEXP sexpSEXP, SEXP positionSEXP, SEXP velocitySEXP, SEXP actionSEXP, SEXP logpdfGradientSEXP, SEXP momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type velocity(velocitySEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type action(actionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type logpdfGradient(logpdfGradientSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(getNextEvent(sexp, position, velocity, action, logpdfGradient, momentum));
    return rcpp_result_gen;
END_RCPP
}
// oneIteration
Rcpp::List oneIteration(SEXP sexp, NumericVector& position, NumericVector& momentum, double time);
RcppExport SEXP _hdtg_oneIteration(SEXP sexpSEXP, SEXP positionSEXP, SEXP momentumSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    Rcpp::traits::input_parameter< double >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(oneIteration(sexp, position, momentum, time));
    return rcpp_result_gen;
END_RCPP
}
// oneNutsIteration
Rcpp::List oneNutsIteration(SEXP sexp, NumericVector& position, NumericVector& momentum);
RcppExport SEXP _hdtg_oneNutsIteration(SEXP sexpSEXP, SEXP positionSEXP, SEXP momentumSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type sexp(sexpSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type momentum(momentumSEXP);
    rcpp_result_gen = Rcpp::wrap(oneNutsIteration(sexp, position, momentum));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hdtg_cholesky", (DL_FUNC) &_hdtg_cholesky, 1},
    {"_hdtg_applyWhitenTransform", (DL_FUNC) &_hdtg_applyWhitenTransform, 5},
    {"_hdtg_whitenPosition", (DL_FUNC) &_hdtg_whitenPosition, 6},
    {"_hdtg_unwhitenPosition", (DL_FUNC) &_hdtg_unwhitenPosition, 4},
    {"_hdtg_simulateWhitenedDynamics", (DL_FUNC) &_hdtg_simulateWhitenedDynamics, 7},
    {"_hdtg_createEngine", (DL_FUNC) &_hdtg_createEngine, 7},
    {"_hdtg_createNutsEngine", (DL_FUNC) &_hdtg_createNutsEngine, 8},
    {"_hdtg_setMean", (DL_FUNC) &_hdtg_setMean, 2},
    {"_hdtg_setPrecision", (DL_FUNC) &_hdtg_setPrecision, 2},
    {"_hdtg_getNextEvent", (DL_FUNC) &_hdtg_getNextEvent, 6},
    {"_hdtg_oneIteration", (DL_FUNC) &_hdtg_oneIteration, 4},
    {"_hdtg_oneNutsIteration", (DL_FUNC) &_hdtg_oneNutsIteration, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_hdtg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
